version: "3.4"

services:
  redis:
    container_name: redis_cam_rec
    hostname: redis_cam_rec
    image: redis:4.0-alpine
    ports:
      - "6379:6379"
    restart: on-failure

  app:
    build:
      context: .
    command: sh -c "python manage.py migrate && gunicorn cam_recorder.wsgi -b 0.0.0.0:8000"
    container_name: app
    depends_on:
      - redis
    ports:
      - "8000:8000"
    hostname: app
    image: app-image
    restart: on-failure
    volumes:
      - ./data/:/app/data
    environment:
      - PROD=1

  celery_worker:
    command: sh -c "celery -A cam_recorder worker -l info"
    container_name: celery_worker
    depends_on:
      - app
      - redis
      - celery_worker
    # deploy:
    #   replicas: 2
    #   restart_policy:
    #     condition: on-failure
    #   resources:
    #     limits:
    #       cpus: "0.50"
    #       memory: 50M
    #     reservations:
    #       cpus: "0.25"
    #       memory: 20M
    hostname: celery_worker
    image: app-image
    restart: on-failure
    volumes:
      - ./data/:/app/data

  celery_beat:
    command: sh -c "celery -A cam_recorder beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    container_name: celery_beat
    depends_on:
      - app
      - redis
    hostname: celery_beat
    image: app-image
    restart: on-failure
    volumes:
      - ./data/:/app/data
# CMD : docker-compose up -d app
# docker stack deploy --compose-file docker-compose.yml recorder_app

